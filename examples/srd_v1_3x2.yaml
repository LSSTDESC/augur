generate:
  parameters: &parameters
    Omega_k: 0.0
    Omega_b: 0.0492
    Omega_c: 0.26639999999999997  # = 0.3156 - 0.0492
    w0: -1.0
    wa: 0.0
    h: 0.6727
    A_s: 2.12655e-9  # has sigma8 = 0.8310036
    n_s: 0.9645
  
    # IA model
    eta_ia: 0.0
    eta_ia_highz: 0.0
    beta_ia: 1.0
    A0: 5.0
  
    mult_bias: 0.0
  
    # magic numbers from Tim
    # for the life of me, I cannot figure out how to get CCL to compute the
    # SRD bias values. So they are hard coded here.
    {% for i, bias in [(0, 1.562362), (1, 1.732963), (2, 1.913252), (3, 2.100644), (4, 2.293210)] %}
    bias_lens{{ i }}: {{ bias }}
    {% endfor %}
    
    # photoz shifts for the lensing sources
    {% for i in range(5) %}
    src{{ i }}_delta_z: 0.0
    {% endfor %}
  
    # photoz shifts for the lenses
    {% for i in range(5) %}
    lens{{ i }}_delta_z: 0.0
    {% endfor %}
  

  two_point:
    module: firecrown.ccl.two_point
    sacc_file: data/srd_v1_3x2.sacc
    sources:
      {% for i in range(5) %}
      src{{ i }}:
        kind: WLSource
        sacc_tracer:  src{{ i }}
        Nz_type: Gaussian
        Nz_center: {{ 0.3 + 0.2*i }}
        Nz_sigma: 0.2 
        ia_bias: A0
        systematics:
          - delta_z_src{{ i }}
          - keb16_ia
          - shear_bias
      {% endfor %}
  
      {% for i in range(5) %}
      lens{{ i }}:
        kind: NumberCountsSource
        sacc_tracer:  lens{{ i }}
        Nz_type: TopHat
        Nz_center: {{ 0.3 + 0.2*i }}
        Nz_width: 0.2 
        bias: bias_lens{{ i }}
        systematics:
          - delta_z_lens{{ i }}
      {% endfor %}
  
    systematics:
      {% for thing in ['lens', 'src'] %}
      {% for i in range(5) %}
      delta_z_{{ thing }}{{ i }}:
        kind: PhotoZShiftBias
        delta_z: {{ thing }}{{ i }}_delta_z
      {% endfor %}
      {% endfor %}
  
      keb16_ia:
        kind: srd_models.KEBNLASystematic
        eta_ia: eta_ia
        eta_ia_highz: eta_ia_highz
        beta_ia: beta_ia
  
      shear_bias:
        kind: srd_models.DESCSRDv1MultiplicativeShearBias
        m: mult_bias
  
    statistics:
      {% for i in range(5) %}
      {% for j in range(i, 5) %}
      cl_src{{ i }}_src{{ j }}:
        sources: ['src{{ i }}', 'src{{ j }}']
        sacc_data_type: galaxy_shear_cl_ee
      {% endfor %}
      {% endfor %}
  
      {% for j,i in [(0, 2), (0, 3), (0, 4), (1, 3), (1, 4), (2, 4), (3, 4)] %}
      cl_src{{ i }}_lens{{ j }}:
        sources: ['src{{ i }}', 'lens{{ j }}']
        sacc_data_type: galaxy_shearDensity_cl_e
      {% endfor %}
  
      {% for i in range(5) %}
      cl_lens{{ i }}_lens{{ i }}:
        sources: ['lens{{ i }}', 'lens{{ i }}']
        sacc_data_type: galaxy_density_cl
      {% endfor %}
  

analyze:
  parameters: *parameters #same as generation

  priors:
    module: firecrown.priors
    A0:
      kind: norm
      loc: 5.0
      scale: 3.9
    beta_ia:
      kind: norm
      loc: 1.0
      scale: 1.6
    eta_ia:
      kind: norm
      loc: 0.0
      scale: 2.3
    eta_ia_highz:
      kind: norm
      loc: 0.0
      scale: 0.8
    {% for i in range(5) %}
    bias_lens{{ i }}:
      kind: norm
      loc: 1.9
      scale: 0.9
    {% endfor %}
  

  two_point:
    same_as: generation 

    likelihood:
      kind: ConstGaussianLogLike
      data_vector:
      {% for i in range(5) %}
      {% for j in range(i, 5) %}
        - cl_src{{ i }}_src{{ j }}
      {% endfor %}
      {% endfor %}
      {% for j,i in [(0, 2), (0, 3), (0, 4), (1, 3), (1, 4), (2, 4), (3, 4)] %}
        - cl_src{{ i }}_lens{{ j }}
      {% endfor %}
      {% for i in range(5) %}
        - cl_lens{{ i }}_lens{{ i }}
      {% endfor %}

  hessian:
    parameters: *parameters #same as generation

    steps:
      default_frac: 0.01
      Omega_k: 0.01

    output: &fisher_fname srd_v1_output.fits 


postprocess:
  input: *fisher_fname
  latex_table: srd_v1.tex
  triangle_plot: srd_v1.pdf
