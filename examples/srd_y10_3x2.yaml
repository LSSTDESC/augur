generate:
  augur: # general options
    # the folowing two options are place-holders for what
    # will once be part of TJPCov interface
    fsky : &fsky 0.35 # Y1 - 14,300 sq-deg
    add_noise: &add_noise False # add a realization of noise?
    kmax: &kmax 0.3 # kmax in Mpc^-1 for 2pt analyses

  parameters: &parameters
    Omega_k: 0.0
    Omega_b: 0.0492
    Omega_c: 0.26639999999999997  # = 0.3156 - 0.0492
    w0: -1.0
    wa: 0.0
    h: 0.6727
    sigma8: 0.83
    n_s: 0.9645
    #transfer_function: 'eisenstein_hu'
    # IA model
    eta_ia: 0.0
    eta_ia_highz: 0.0
    beta_ia: 1.0
    A0: 5.0

    mult_bias: 0.0


    # Values computed as 0.95/G(z) with fiducial cosmo below:

    {% for i, bias in [(0, 1.08503751), (1, 1.14373505), (2, 1.20458916),
                       (3, 1.26729764), (4, 1.33159408), (5, 1.39724721),
                       (6, 1.46405855), (7, 1.53185887), (8, 1.6005048),
                       (9, 1.66987515)] %}
    bias_lens{{ i }}: {{ bias }}
    {% endfor %}

    # photoz shifts for the lensing sources
    {% for i in range(10) %}
    src{{ i }}_delta_z: 0.0
    {% endfor %}

    # photoz shifts for the lenses
    {% for i in range(10) %}
    lens{{ i }}_delta_z: 0.0
    {% endfor %}

  two_point: &two_point
    module: firecrown.ccl.two_point
    sacc_file: &sacc_file syndata/srd_y10_3x2.sacc
    fsky: *fsky
    add_noise: *add_noise
    parameters: *parameters #same as generation
    kmax: *kmax
    sources: &two_point_sources
      {% for i in range(5) %}
      src{{ i }}:
        kind: WLSource
        sacc_tracer:  src{{ i }}
        Nz_type: SourceSRD2018
        Nz_nbins: 5
        Nz_bin: {{ i }}
        Nz_alpha: 0.68
        Nz_z0: 0.11
        Nz_sigmaz: 0.05
        ellipticity_error: 0.26
        number_density: 5.4 # per arcmin2 (27 arcmin-2 divided by 5 bins)
        ia_bias: A0
        systematics:
          - delta_z_src{{ i }}
      {% endfor %}
      # Using 48 arcmin^-2 and multiplying times the integral of the bin's N(z) relative to the total
      {% for i, ndens in [(0, 2.1), (1, 3.2), (2, 4.2), (3, 4.9),
                          (4, 5.5), (5, 5.7), (6, 5.9), (7, 5.7),
                          (8, 5.7), (9, 5.2)] %}
      lens{{ i }}:
        kind: NumberCountsSource
        sacc_tracer:  lens{{ i }}
        Nz_type: LensSRD2018
        Nz_center: {{ 0.25 + 0.1*i }}
        Nz_width: 0.1
        Nz_sigmaz: 0.03
        Nz_alpha: 0.90
        Nz_z0: 0.28
        number_density: {{ ndens }} # per arcmin2
        bias: bias_lens{{ i }}
        systematics:
          - delta_z_lens{{ i }}
      {% endfor %}

    systematics: &two_point_systematics
      {% for thing, imax in [('lens', 10), ('src', 5)] %}
      {% for i in range(imax) %}
      delta_z_{{ thing }}{{ i }}:
        kind: PhotoZShiftBias
        delta_z: {{ thing }}{{ i }}_delta_z
      {% endfor %}
      {% endfor %}

    statistics: &two_point_statistics
      {% for i in range(5) %}
      {% for j in range(i, 5) %}
      cl_src{{ i }}_src{{ j }}:
        sources: ['src{{ i }}', 'src{{ j }}']
        sacc_data_type: galaxy_shear_cl_ee
        # Note that we can also just put a list of numbers here
        # as in ell_edgs = [23., 32., 45., 64.]
        ell_edges: np.logspace(np.log10(20),np.log10(15000),21)[:15] # This selects up to ell=3000 -> ell,max_shear (SRD p. 59)
      {% endfor %}
      {% endfor %}

      {% for j,i in [(0, 1), (0, 2), (0, 3), (0, 4), (1, 1), (1, 2), (1, 3), (1, 4),
                     (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4), (4, 2), (4, 3),
                     (4, 4), (5, 3), (5, 4), (6, 3), (6, 4), (7, 3), (7, 4), (8, 4),
                     (9, 4)] %}
      cl_src{{ i }}_lens{{ j }}:
        sources: ['src{{ i }}', 'lens{{ j }}']
        sacc_data_type: galaxy_shearDensity_cl_e
        ell_edges: np.logspace(np.log10(20),np.log10(15000),21)[:15] # This selects up to ell=3000
       {% endfor %}

      {% for i in range(10) %}
      cl_lens{{ i }}_lens{{ i }}:
        sources: ['lens{{ i }}', 'lens{{ i }}']
        sacc_data_type: galaxy_density_cl
        ell_edges: np.logspace(np.log10(20),np.log10(15000),21)
        {% endfor %}


analyze:
  parameters: *parameters #same as generation

  priors:
    module: firecrown.priors
    Omega_c:
      kind: norm
      loc: 0.2665
      scale: 0.2
    Omega_b:
      kind: norm
      loc: 0.0492
      scale: 0.006
    sigma8:
      kind: norm
      loc: 0.831
      scale: 0.14
    n_s:
      kind: norm
      loc: 0.9645
      scale: 0.08
    w0:
      kind: norm
      loc: -1
      scale: 0.8
    wa:
      kind: norm
      loc: 0.0
      scale: 2.0
    A0:
      kind: norm
      loc: 5.0
      scale: 3.9
    beta_ia:
      kind: norm
      loc: 1.0
      scale: 1.6
    eta_ia:
      kind: norm
      loc: 0.0
      scale: 2.3
    eta_ia_highz:
      kind: norm
      loc: 0.0
      scale: 0.8
    {% for i in range(10) %}
    bias_lens{{ i }}:
      kind: norm
      loc: 1.9
      scale: 0.9
    {% endfor %}


  two_point:
    module: firecrown.ccl.two_point
    sacc_data: *sacc_file
    sources: *two_point_sources
    systematics: *two_point_systematics
    statistics: *two_point_statistics
    likelihood:
      kind: ConstGaussianLogLike
      data_vector:
      {% for i in range(5) %}
      {% for j in range(i, 5) %}
        - cl_src{{ i }}_src{{ j }}
      {% endfor %}
      {% endfor %}
      {% for j,i in [(0, 1), (0, 2), (0, 3), (0, 4), (1, 1), (1, 2), (1, 3), (1, 4),
                     (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4), (4, 2), (4, 3),
                     (4, 4), (5, 3), (5, 4), (6, 3), (6, 4), (7, 3), (7, 4), (8, 4),
                     (9, 4)] %}
        - cl_src{{ i }}_lens{{ j }}
      {% endfor %}
      {% for i in range(10) %}
        - cl_lens{{ i }}_lens{{ i }}
      {% endfor %}

  cosmosis:
    sampler: fisher
    output_dir: output/
    output: &fisher_fname fisher_y10.txt # not working
    debug: True
    quiet: False
    mpi: False
    # parameters for individual samplers:
    test:
      fatal_errors: True
    emcee:
      walkers: 10
      nsample: 20
    grid:
      nsample_dimension: 25
    fisher:
      step_size: 0.0002
    # which parameters to vary in the chains
    parameters:
      Omega_c: [0.1, 0.26, 0.9]
      sigma8: [0.4, 0.81, 1.2]
      w0: [-1.8, -1.0, -0.2]
      wa: [-4, 0.0, 0.5]
      h: [0.5, 0.6727, 0.8]
      n_s: [0.9, 0.9645, 1.0]
      eta_ia: [-1.0, 0.0, 1.0]
      eta_ia_highz: [-1.0, 0.0, 1.0]
      beta_ia: [0.5, 1.0, 1.5 ]
      A0: [2.0, 5.0, 10.0]

      mult_bias: [-0.1 0.0 0.1]
    # SRD bias values. So far they are hard coded here.


      {% for i, bias in [(0, 1.08503751), (1, 1.14373505), (2, 1.20458916),
                         (3, 1.26729764), (4, 1.33159408), (5, 1.39724721),
                         (6, 1.46405855), (7, 1.53185887), (8, 1.6005048),
                         (9, 1.66987515)] %}
      bias_lens{{ i }}: [0, {{ bias }}, 10]
      {% endfor %}

      # photoz shifts for the lensing sources
      {% for i in range(5) %}
      src{{ i }}_delta_z: [-0.2, 0.0, 0.2]
      {% endfor %}

      # photoz shifts for the lenses
      {% for i in range(10) %}
      lens{{ i }}_delta_z: [-0.2, 0.0, 0.2]
      {% endfor %}

postprocess:
  input: *fisher_fname
  latex_table: data/srd_y10.tex
  triangle_plot: data/srd_y10.pdf
