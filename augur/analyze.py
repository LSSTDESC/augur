"""Data analysis module.

This module runs the actual analysis of the data that
has been previously generated by the generate module.
At the moment it is a thin-wrapper to cosmosis.

"""

import firecrown
import pathlib
from .generate import firecrown_sanitize
from copy import deepcopy
import numpy as np
import numdifftools as nd


def analyze(config):
    """ Analyzes the data, i.e. a thin wrapper to firecrown

    Parameters:
    ----------
    config : dict
        The yaml parsed dictional of the input yaml file
    """

    ana_config = config["analyze"]
    _config, data = firecrown.parse(firecrown_sanitize(ana_config))
    firecrown.run_cosmosis(_config, data, pathlib.Path(ana_config["cosmosis"]["output_dir"]))
    F_ij = np.loadtxt(pathlib.Path(ana_config["cosmosis"]["output_dir"]) / 'chain.txt')
    # evaluate ell_sys and C_ell_sys from the config
    ell_sys = eval(config["fisher"]["ell_sys"])
    C_ell_sys = eval(config["fisher"]["C_ell_sys"])

    bias = run_bias(config, F_ij, ell_sys, C_ell_sys)


def run_bias(config, F_ij, ell_sys, C_ell_sys):
    """
    Call likelihood and compute relevant derivatives to get
    an estimate of the Fisher bias.

    Parameters:
    -----------
    config : dict
        The yaml parsed dictionary of the input yaml file,
    F_ij : ndarray
        Fisher matrix computed at the maximum likelihood position
        through the calculation of the Hessian of the likelihood.
    ell_sys: ndarray
        Multipoles at which the systematics power spectrum is passed.
    C_ell_sys: ndarray
        Power spectrum of the systematics (evaluated at ell_sys).

    Returns:
    --------
    b_j : ndarray
        Fisher biases (see Biancamaria's work for more details).
    """

    ana_config = config["analyze"]
    _config, data = firecrown.parse(firecrown_sanitize(ana_config))
    # Reference Parameters
    ref_pars = data["parameters"]
    par_names = list(set(list(data["priors"]["data"].keys())) - set(["module"]))
    inv_cov = data['two_point']['data']['likelihood'].inv_cov

    def C_ells_2pt(x):
        pars = deepcopy(ref_pars)  # To make sure that we start from the same point
        for i in range(len(x)):
            pars[par_names[i]] = x[i]
        # Create cosmology object
        cosmo = firecrown.get_ccl_cosmology(pars)
        # Render tracers
        for _, src in data['two_point']['data']['sources'].items():
            src.render(cosmo, params=pars,
                       systematics=data['two_point']['data']['systematics'])
        # Render the C_ells
        pred_all = []

        for name, stat in data['two_point']['data']['statistics'].items():
            stat.compute(cosmo, pars, data['two_point']['data']['sources'],
                         systematics=data['two_point']['data']['systematics'])
            pred_all.append(stat.predicted_statistic_)
            ells = stat.ell_or_theta_
        pred_all = np.array(pred_all)
        return pred_all, ells

    x0 = [data["parameters"][kk] for kk in par_names]
    # We need the multipoles at which we have the data-vectors
    # we are assuming smooth power spectra and top-hat windows
    _, ell_ref = C_ells_2pt(x0)
    # We get the power spectrum of the systematics evaluated at the
    # desired multipoles
    print(ell_ref, len(ell_ref), len(ell_sys), len(C_ell_sys))
    C_ell_sys_int = np.interp(ell_ref, ell_sys, C_ell_sys)

    def aux_bias(x):
        return np.einsum('i, ij, j', C_ell_sys_int, inv_cov, C_ells_2pt(x)[0])

    dtheta_j = nd.Gradient(aux_bias,
                           step=float(config["fisher"]["step"]))(x0)

    print('Debugging derivatives', dtheta_j)
    return dtheta_j
